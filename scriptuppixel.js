let originalImage = new Image();
let uploadedFile = null;

document.getElementById("upload").addEventListener("change", function (e) {
  const file = e.target.files[0];
  if (!file) return;
  uploadedFile = file;

  // ‡∏•‡∏ö Blob URL ‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leak
  if (window.originalBlobUrl) {
    URL.revokeObjectURL(window.originalBlobUrl);
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Blob URL ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
  window.originalBlobUrl = URL.createObjectURL(file);

  originalImage.src = window.originalBlobUrl;
  document.getElementById("original-preview").src = window.originalBlobUrl;
  document.getElementById("original-link").href = window.originalBlobUrl;
});


originalImage.onload = function () {
  showOriginalInfo();
};

function showOriginalInfo() {
  const infoDiv = document.getElementById("original-info");
  const file = uploadedFile;

  if (!file) return;

  const sizeKB = (file.size / 1024).toFixed(2);
  const type = file.type;
  const name = file.name;
  const width = originalImage.width;
  const height = originalImage.height;

  infoDiv.innerHTML = `
    <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö:</strong><br>
    üñºÔ∏è ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ${name}<br>
    üìÅ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${type}<br>
    üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: ${sizeKB} KB<br>
    üìê ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û: ${width} x ${height} px
  `;
  infoDiv.style.display = "block";
}

function upscaleImage() {
  const scale = parseInt(document.getElementById("scale").value);
  const format = document.getElementById("format").value;

  if (!originalImage.src) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô");
    return;
  }

  const canvas = document.getElementById("canvas");
  const ctx = canvas.getContext("2d");
  const width = originalImage.width;
  const height = originalImage.height;

  const newWidth = width * scale;
  const newHeight = height * scale;

  canvas.width = newWidth;
  canvas.height = newHeight;

  ctx.imageSmoothingEnabled = true; // ‡πÄ‡∏õ‡∏¥‡∏î smoothing ‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô
  ctx.imageSmoothingQuality = 'high'; // ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á

  ctx.filter = 'blur(0.8px)'; // ‡πÄ‡∏ö‡∏•‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô
  ctx.drawImage(originalImage, 0, 0, newWidth, newHeight);
  ctx.filter = 'none'; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï filter ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠

  document.getElementById("comparison").style.display = "flex";

  const originalName = uploadedFile.name.split('.').slice(0, -1).join('.');
  const newFilename = `upscaled_${originalName}.${format}`;

  const resultInfo = document.getElementById("result-info");
  resultInfo.innerHTML = `
    <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß:</strong><br>
    üñºÔ∏è ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ${newFilename}<br>
    üîç ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà: ${newWidth} x ${newHeight} px<br>
    üîó ‡∏Ç‡∏¢‡∏≤‡∏¢: ${scale}x<br>
    üßæ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${format.toUpperCase()}
  `;
  resultInfo.style.display = "block";

  const mimeTypeMap = {
    jpg: 'image/jpeg',
    png: 'image/png',
    webp: 'image/webp'
  };
  const mimeType = mimeTypeMap[format] || 'image/jpeg';

  const dataURL = canvas.toDataURL(mimeType);

  // ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏¢‡∏≤‡∏¢
  // ‡∏•‡∏ö Object URL ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ memory leak
if (window.canvasBlobUrl) {
  URL.revokeObjectURL(window.canvasBlobUrl);
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Blob ‡∏à‡∏≤‡∏Å canvas
canvas.toBlob(function(blob) {
  window.canvasBlobUrl = URL.createObjectURL(blob);
  document.getElementById("canvas-link").href = window.canvasBlobUrl;
}, mimeType);


  // ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
  const downloadLink = document.getElementById("download");
  downloadLink.href = dataURL;
  downloadLink.download = newFilename;
  downloadLink.style.display = "inline-block";

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏î‡πÄ‡∏ô‡∏ó
  document.getElementById("donate-section").style.display = "block";
}

function resetPage() {
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï input ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
  document.getElementById("upload").value = "";
  uploadedFile = null;
  originalImage.src = "";

  document.getElementById("original-preview").src = "";
  document.getElementById("original-link").href = "#";
  document.getElementById("canvas").width = 0;
  document.getElementById("canvas").height = 0;
  document.getElementById("canvas-link").href = "#";

  document.getElementById("original-info").style.display = "none";
  document.getElementById("result-info").style.display = "none";
  document.getElementById("comparison").style.display = "none";
  
  const downloadLink = document.getElementById("download");
  downloadLink.style.display = "none";
  downloadLink.href = "";
  downloadLink.download = "";

  document.getElementById("donate-section").style.display = "none";

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï scale ‡πÅ‡∏•‡∏∞ format ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  document.getElementById("scale").value = 2;
  document.getElementById("format").value = "jpg";
}

const dropContainer = document.getElementById('dropcontainer');
const uploadInput = document.getElementById('upload');
const originalInfo = document.getElementById('original-info');

dropContainer.addEventListener('dragover', (e) => {
  e.preventDefault();
  dropContainer.style.backgroundColor = '#eee';
  dropContainer.style.borderColor = '#111';
});

dropContainer.addEventListener('dragleave', (e) => {
  e.preventDefault();
  dropContainer.style.backgroundColor = '';
  dropContainer.style.borderColor = '#555';
});

dropContainer.addEventListener('drop', (e) => {
  e.preventDefault();
  dropContainer.style.backgroundColor = '';
  dropContainer.style.borderColor = '#555';

  if (e.dataTransfer.files.length > 0) {
    uploadInput.files = e.dataTransfer.files;  // ‡πÉ‡∏™‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏≤‡∏Å‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô input
    handleFiles(e.dataTransfer.files);
  }
});

uploadInput.addEventListener('change', (e) => {
  if (uploadInput.files.length > 0) {
    handleFiles(uploadInput.files);
  }
});

function handleFiles(files) {
  const file = files[0];
  if (!file.type.startsWith('image/')) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    return;
  }

  uploadedFile = file; // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

  window.originalBlobUrl = URL.createObjectURL(file);
  originalImage.src = window.originalBlobUrl;
  document.getElementById("original-preview").src = window.originalBlobUrl;
  document.getElementById("original-link").href = window.originalBlobUrl;

  const reader = new FileReader();
  reader.onload = (event) => {
    originalInfo.style.display = 'block';
    originalInfo.innerHTML = `
      <strong>‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå:</strong> ${file.name}<br>
      <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> ${file.type}<br>
      <strong>‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå:</strong> ${(file.size / 1024).toFixed(2)} KB
    `;
  };
  reader.readAsDataURL(file);
}


